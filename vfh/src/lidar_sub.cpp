#include "ros/ros.h"
#include "sensor_msgs/LaserScan.h"
#include "std_srvs/Empty.h"
#include "geometry_msgs/Twist.h"



/* the velocity generated by navigation stack is imported into this package fisrt. divided by if-conditionals of using monitor or not, one branch is to delivery velocity command to arduino node while the other is to generate stop command only if forbidable laser ranges are detected.
定义一个类
该类订阅速度信息和雷达信息
发布新的速度信息到arduino

******************************velocity(/cmd_vel)**********************************
************branch1*******************************************branch2*************
******connecting with arduino directly******************monitor warning distance**
*****generating orignal velocity*********************original velocity but 0 when needed
*/
 

void callback(sensor_msgs::LaserScan scan)
{
int i=0;
geometry_msgs::Twist bonus;
ros::NodeHandle nh1;
ros::Publisher money;
ros::Rate r=10;
money=nh1.advertise<geometry_msgs::Twist>("/cmd_vel",1000);
while (i<360)
{
//bonus.linear.x=1;
if(scan.ranges[i]<0.4)
//ROS_INFO("lowback pain!!!!!");
{money.publish(bonus);
bonus.linear.x=0;
ROS_INFO("lowback pain!!!!!");
r.sleep();
};
i++;
};

ROS_INFO("scan done");
};

int main(int argc, char * argv[]) {
    ros::init(argc, argv, "lidar_sub");


ros::NodeHandle nh;
ros::Subscriber sub;
sub=nh.subscribe<sensor_msgs::LaserScan>("scan", 1, callback);
ros::spin();
}
